<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:custom="clr-namespace:PresentationWPF.CustomControls"
                    mc:Ignorable="d">


  <Style x:Key="Logo" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Line
              X1="0" Y1="0"
              X2="170" Y2="0"
              Margin="35 0 0 0 "
              Width="150"
              StrokeThickness="4"
              Stroke="{DynamicResource Primary}"
              VerticalAlignment="Bottom"
              HorizontalAlignment="Left" />
            <TextBlock
              VerticalAlignment="Bottom"
              HorizontalAlignment="Left"
              Margin="57 0 0 0"
              Text="KhaiHealthCo."
              FontFamily="Be Vietnam Pro"
              Foreground="Black"
              FontSize="24" />


            <Ellipse
              Width="33"
              Height="33"
              VerticalAlignment="Bottom"
              HorizontalAlignment="Left"
              Margin="20 0 0 0"
              Fill="White">

              <Ellipse.Effect>
                <DropShadowEffect
                  Direction="270"
                  Opacity="0.25"
                  BlurRadius="4" />
              </Ellipse.Effect>
            </Ellipse>

            <Rectangle
              Height="29" Width="8"
              Fill="#53A616"
              VerticalAlignment="Bottom"
              HorizontalAlignment="Left"
              Margin="32.5 0 0 2" />

            <Rectangle
              Height="8" Width="29"
              Fill="#53A616"
              VerticalAlignment="Bottom"
              HorizontalAlignment="Left"
              Margin="22 0 0 12" />

          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter />
        </ControlTemplate>
      </Setter.Value>

    </Setter>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>


  <Style TargetType="TextBox">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontSize" Value="20" />

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="IBeam" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="PasswordBox">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontSize" Value="20" />

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="IBeam" />
      </Trigger>
    </Style.Triggers>
  </Style>


  <Style x:Key="TextBoxBorder" TargetType="Border">
    <Setter Property="BorderThickness" Value="0 0 0 3" />
    <Setter Property="BorderBrush" Value="{DynamicResource Secondary}" />
    <Setter Property="CornerRadius" Value="2.5" />

  </Style>


  <Style x:Key="HintLabel" TargetType="Label">
    <Setter Property="Foreground">
      <Setter.Value>
        <SolidColorBrush Color="Black" Opacity="0.4" />
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontSize" Value="20" />
    <Setter Property="Padding" Value="0 0 0 0" />
    <Setter Property="Margin" Value="0 0 0 0" />
    <Setter Property="FontStyle" Value="Italic" />
    <Setter Property="FontStretch" Value="UltraExpanded" />
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
  </Style>


  <Style TargetType="{x:Type custom:Modal}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type custom:Modal}">
          <ControlTemplate.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
          </ControlTemplate.Resources>
          <Grid Background="{TemplateBinding Background}"
                Visibility="{TemplateBinding IsOpen, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border
              HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
              VerticalAlignment="{TemplateBinding VerticalAlignment}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              UseLayoutRounding="True">
              <Grid>
                <Grid.OpacityMask>
                  <VisualBrush Visual="{Binding ElementName=border}" />
                </Grid.OpacityMask>
                <Border
                  x:Name="border"
                  Background="{DynamicResource Background}" 
                  />
                <ContentControl Content="{TemplateBinding Content}" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center"
                              Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border" />
              <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" />
              <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" />
              <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
  <Style x:Key="HorizontalSimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Margin="0,0,0,0" x:Name="Grid">
            <Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="5"
                       Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource Secondary}" StrokeThickness="0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True" />
            <Trigger Property="IsMouseOver" Value="True" />
            <Trigger Property="IsEnabled" Value="False" />
            <Trigger Property="IsDragging" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
  <Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Rectangle Fill="Transparent" Stroke="Transparent" StrokeThickness="{TemplateBinding BorderThickness}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

  <Style x:Key="SimpleHorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                Background="Transparent">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>

            <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
              <Track.Thumb>
                <Thumb Style="{DynamicResource HorizontalSimpleThumbStyle}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand" />
              </Track.DecreaseRepeatButton>
            </Track>
          </Grid>

          <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
                    It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">

              <!-- Rotate the ScrollBar from Vertical to Horizontal -->
              <Setter Property="LayoutTransform" TargetName="GridRoot">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>

              <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
              <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

              <!-- Change the commands to do Horizontal commands -->
              <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
              <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="SimpleVerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                Background="Transparent">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>

            <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
              <Track.Thumb>
                <Thumb Style="{DynamicResource HorizontalSimpleThumbStyle}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand" />
              </Track.DecreaseRepeatButton>
            </Track>
          </Grid>

          <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
                    It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">

              <!-- Rotate the ScrollBar from Vertical to Horizontal -->
              <Setter Property="LayoutTransform" TargetName="GridRoot">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>

              <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
              <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

              <!-- Change the commands to do Horizontal commands -->
              <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
              <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}" />

            <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                       Grid.Row="1" x:Name="PART_HorizontalScrollBar"
                       Style="{DynamicResource SimpleHorizontalScrollBar}" Orientation="Horizontal"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0"
                       Maximum="{TemplateBinding ScrollableWidth}" />
            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0"
                       x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleVerticalScrollBar}"
                       Orientation="Vertical"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0"
                       Maximum="{TemplateBinding ScrollableHeight}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#e3e9ef" />
  <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#fff" />
  <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
  <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
  <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

  <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <Border Grid.ColumnSpan="2" Name="Border"
              CornerRadius="0" BorderThickness="0" 
              Background="Transparent" />
      <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="Transparent" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Background="Transparent" />

      <Image 
        Name="Arrow" Grid.Column="1" 
        RenderTransformOrigin="0.5, 0.5"
        HorizontalAlignment="Center" 
        Source="{DynamicResource RoundedArrowIcon}"
        VerticalAlignment="Center"
        Height="{TemplateBinding Height}"
      />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="RenderTransform" TargetName="Arrow">
          <Setter.Value>
            <RotateTransform Angle="180"/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="RenderTransform" TargetName="Arrow">
          <Setter.Value>
            <RotateTransform Angle="180"/>
          </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
        <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style  TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="TextElement.Foreground" Value="Black"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

            <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
            <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" 
                     >
              <TextBox.Template>
                <ControlTemplate TargetType="TextBox" >
                  <Border Name="PART_ContentHost" Focusable="False" />
                </ControlTemplate>
              </TextBox.Template>
            </TextBox>
            <!-- Popup showing items -->
            <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                <Border Name="DropDownBorder" Background="White" Margin="0, 3, 0, 0"
                        CornerRadius="0" BorderThickness="0"
                />
                <ScrollViewer 
                  VerticalScrollBarVisibility="Auto" 
                  Margin="4" SnapsToDevicePixels="True" 
                  Style="{DynamicResource SimpleScrollViewer}"
                >
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="True">
              <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
              <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
              <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style TargetType="DataGrid">
    <Setter Property="AutoGenerateColumns" Value="False"/>
    <Setter Property="HeadersVisibility" Value="Column"/>
    <Setter Property="FontWeight" Value="SemiBold"/>
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="CanUserAddRows" Value="False" />
    <Setter Property="CanUserDeleteRows" Value="False" />
    <Setter Property="CanUserResizeColumns" Value="False" />
    <Setter Property="CanUserReorderColumns" Value="False" />
    <Setter Property="CanUserResizeRows" Value="False" />
    <Setter Property="GridLinesVisibility" Value="None"/>
    <Setter Property="ColumnHeaderStyle">
      <Setter.Value>
        <Style TargetType="DataGridColumnHeader">
          <Setter Property="Background" Value="Transparent"/>
          <Setter Property="Padding" Value="0 0 15 30"/>
          <Setter Property="FontSize" Value="21"/>
          <Setter Property="FontWeight" Value="SemiBold"/>
          <Setter Property="HorizontalAlignment" Value="Center"/>
          <Setter Property="Foreground" Value="{DynamicResource Primary}"/>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style TargetType="DataGridCell">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type DataGridRow}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>